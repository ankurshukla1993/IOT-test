package kotlin.sequences;

import com.facebook.internal.FacebookRequestErrorClassification;
import com.facebook.internal.NativeProtocol;
import com.google.firebase.analytics.FirebaseAnalytics.Param;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.SinceKotlin;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.collections.Grouping;
import kotlin.collections.IndexedValue;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2;
import kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1;
import kotlin.internal.InlineOnly;
import kotlin.jvm.JvmName;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DoubleCompanionObject;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@Metadata(bv = {1, 0, 2}, d1 = {"\u0000\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001c\n\u0002\b\u0002\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010%\n\u0002\b\u0005\n\u0002\u0010\u0006\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\u0007\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0000\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010 \n\u0000\n\u0002\u0010!\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0006\n\u0002\u0010\u000e\n\u0002\b\f\n\u0002\u0010\u000f\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010\u0011\n\u0002\b!\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\u001a-\u0010\u0000\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a\u0016\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010\u0006\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a\u001c\u0010\u0007\u001a\b\u0012\u0004\u0012\u0002H\u00020\b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001f\u0010\t\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\b\u001aQ\u0010\n\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\b\u001a?\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\u00020\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b\u001aY\u0010\u0010\u001a\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b\u001aZ\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0018\b\u0002\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b¢\u0006\u0002\u0010\u0017\u001at\u0010\u0013\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b¢\u0006\u0002\u0010\u0018\u001al\u0010\u0019\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u0018\b\u0003\u0010\u0014*\u0012\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\u0006\b\u0000\u0012\u0002H\r0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u001e\u0010\u000e\u001a\u001a\u0012\u0004\u0012\u0002H\u0002\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\f\u0012\u0004\u0012\u0002H\r0\u000f0\u0005H\b¢\u0006\u0002\u0010\u0017\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001c0\u0003H\u0007¢\u0006\u0002\b\u001d\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0002\b\u001e\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0002\b \u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020!0\u0003H\u0007¢\u0006\u0002\b\"\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020#0\u0003H\u0007¢\u0006\u0002\b$\u001a\u0017\u0010\u001a\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020%0\u0003H\u0007¢\u0006\u0002\b&\u001a+\u0010'\u001a\u00020\u0001\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b(*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002H\u0002¢\u0006\u0002\u0010*\u001a\u0016\u0010+\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a-\u0010+\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a\u001c\u0010,\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u0010-\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005\u001a$\u0010/\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u00020!\u001a0\u00101\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a#\u00102\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u00020!¢\u0006\u0002\u00104\u001a7\u00105\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u00020!2\u0012\u00106\u001a\u000e\u0012\u0004\u0012\u00020!\u0012\u0004\u0012\u0002H\u00020\u0005¢\u0006\u0002\u00107\u001a%\u00108\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00103\u001a\u00020!¢\u0006\u0002\u00104\u001a0\u00109\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001aE\u0010:\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010;\u001aa\u0010>\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2'\u0010\u0004\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010;H\b¢\u0006\u0002\u0010A\u001a$\u0010B\u001a\r\u0012\t\u0012\u0007HC¢\u0006\u0002\bD0\u0003\"\u0006\b\u0000\u0010C\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0003H\b\u001a*\u0010B\u001a\b\u0012\u0004\u0012\u0002HC0\u0003\"\u0004\b\u0000\u0010C*\u0006\u0012\u0002\b\u00030\u00032\f\u0010E\u001a\b\u0012\u0004\u0012\u0002HC0FH\u0007\u001a8\u0010G\u001a\u0002H?\"\u0006\b\u0000\u0010C\u0018\u0001\"\u0010\b\u0001\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002H?H\b¢\u0006\u0002\u0010H\u001aC\u0010G\u001a\u0002H?\"\u0010\b\u0000\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@\"\u0004\b\u0001\u0010C*\u0006\u0012\u0002\b\u00030\u00032\u0006\u0010\u0016\u001a\u0002H?2\f\u0010E\u001a\b\u0012\u0004\u0012\u0002HC0FH\u0007¢\u0006\u0002\u0010I\u001a0\u0010J\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a\"\u0010K\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020L*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a;\u0010M\u001a\u0002H?\"\u0010\b\u0000\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020@\"\b\b\u0001\u0010\u0002*\u00020L*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?¢\u0006\u0002\u0010H\u001aL\u0010N\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010O\u001aL\u0010P\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010O\u001a4\u0010Q\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a4\u0010S\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a\u001b\u0010T\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010U\u001a2\u0010T\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a\u001d\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010U\u001a4\u0010V\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a<\u0010W\u001a\b\u0012\u0004\u0012\u0002HC0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002HC0\u00030\u0005\u001aX\u0010X\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C\"\u0010\b\u0002\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2\u0018\u0010\u000e\u001a\u0014\u0012\u0004\u0012\u0002H\u0002\u0012\n\u0012\b\u0012\u0004\u0012\u0002HC0\u00030\u0005H\b¢\u0006\u0002\u0010O\u001aU\u0010Y\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010Z\u001a\u0002HC2'\u0010[\u001a#\u0012\u0013\u0012\u0011HC¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0;H\b¢\u0006\u0002\u0010]\u001aj\u0010^\u001a\u0002HC\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010Z\u001a\u0002HC2<\u0010[\u001a8\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0013\u0012\u0011HC¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0_H\b¢\u0006\u0002\u0010`\u001a-\u0010a\u001a\u00020b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010c\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020b0\u0005H\b\u001aB\u0010d\u001a\u00020b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010c\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020b0;H\b\u001aE\u0010e\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020f0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b\u001a_\u0010e\u001a\u0014\u0012\u0004\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0f0\u000b\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b\u001a^\u0010g\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u001c\b\u0002\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020h0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b¢\u0006\u0002\u0010\u0017\u001ax\u0010g\u001a\u0002H\u0014\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f\"\u0004\b\u0002\u0010\r\"\u001c\b\u0003\u0010\u0014*\u0016\u0012\u0006\b\u0000\u0012\u0002H\f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\r0h0\u0015*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H\u00142\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u00052\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\r0\u0005H\b¢\u0006\u0002\u0010\u0018\u001aA\u0010i\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0j\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010\f*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\b\u0004\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002H\f0\u0005H\b\u001a(\u0010k\u001a\u00020!\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b(*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002¢\u0006\u0002\u0010l\u001a-\u0010m\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a-\u0010n\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a{\u0010o\u001a\u0002Hp\"\u0004\b\u0000\u0010\u0002\"\f\b\u0001\u0010p*\u00060qj\u0002`r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010s\u001a\u0002Hp2\b\b\u0002\u0010t\u001a\u00020u2\b\b\u0002\u0010v\u001a\u00020u2\b\b\u0002\u0010w\u001a\u00020u2\b\b\u0002\u0010x\u001a\u00020!2\b\b\u0002\u0010y\u001a\u00020u2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u\u0018\u00010\u0005¢\u0006\u0002\u0010z\u001a`\u0010{\u001a\u00020|\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\b\b\u0002\u0010t\u001a\u00020u2\b\b\u0002\u0010v\u001a\u00020u2\b\b\u0002\u0010w\u001a\u00020u2\b\b\u0002\u0010x\u001a\u00020!2\b\b\u0002\u0010y\u001a\u00020u2\u0016\b\u0002\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020u\u0018\u00010\u0005\u001a\u001b\u0010}\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010U\u001a2\u0010}\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a(\u0010~\u001a\u00020!\"\t\b\u0000\u0010\u0002¢\u0006\u0002\b(*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002¢\u0006\u0002\u0010l\u001a\u001d\u0010\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010U\u001a4\u0010\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a7\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002HC0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0\u0005\u001aL\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002HC0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u0002H\u00020\u00032'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0;\u001aR\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002HC0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010C*\u00020L*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001HC0;\u001an\u0010\u0001\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010C*\u00020L\"\u0010\b\u0002\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2)\u0010\u000e\u001a%\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001HC0;H\b¢\u0006\u0002\u0010A\u001ah\u0010\u0001\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C\"\u0010\b\u0002\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2'\u0010\u000e\u001a#\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0;H\b¢\u0006\u0002\u0010A\u001a=\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002HC0\u0003\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010C*\u00020L*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001HC0\u0005\u001aY\u0010\u0001\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\b\b\u0001\u0010C*\u00020L\"\u0010\b\u0002\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2\u0014\u0010\u000e\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001HC0\u0005H\b¢\u0006\u0002\u0010O\u001aS\u0010\u0001\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C\"\u0010\b\u0002\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002HC0@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?2\u0012\u0010\u000e\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0\u0005H\b¢\u0006\u0002\u0010O\u001a*\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001aF\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010C*\t\u0012\u0004\u0012\u0002HC0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0\u0005H\b¢\u0006\u0002\u0010R\u001a>\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001¢\u0006\u0003\u0010\u0001\u001a*\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001a\u001b\u0010\u0001\u001a\u0004\u0018\u00010\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\u0010\u0001\u001aF\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010C*\t\u0012\u0004\u0012\u0002HC0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0\u0005H\b¢\u0006\u0002\u0010R\u001a>\u0010\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001¢\u0006\u0003\u0010\u0001\u001a.\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002H\u0002¢\u0006\u0003\u0010\u0001\u001a8\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0001H\u0002¢\u0006\u0003\u0010\u0001\u001a/\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0002\u001a/\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0002\u001a.\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002H\b¢\u0006\u0003\u0010\u0001\u001a\u0017\u0010\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a.\u0010\u0001\u001a\u00020\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a3\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010c\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020b0\u0005H\u0007\u001aF\u0010\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020f\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00020f0\u000f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b\u001a.\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002H\u0002¢\u0006\u0003\u0010\u0001\u001a8\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0010\u0010\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u0002H\u00020\u0001H\u0002¢\u0006\u0003\u0010\u0001\u001a/\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\bH\u0002\u001a/\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0002\u001a.\u0010 \u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010)\u001a\u0002H\u0002H\b¢\u0006\u0003\u0010\u0001\u001aX\u0010¡\u0001\u001a\u0003H¢\u0001\"\u0005\b\u0000\u0010¢\u0001\"\t\b\u0001\u0010\u0002*\u0003H¢\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032)\u0010[\u001a%\u0012\u0014\u0012\u0012H¢\u0001¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¢\u00010;H\b¢\u0006\u0003\u0010£\u0001\u001am\u0010¤\u0001\u001a\u0003H¢\u0001\"\u0005\b\u0000\u0010¢\u0001\"\t\b\u0001\u0010\u0002*\u0003H¢\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032>\u0010[\u001a:\u0012\u0013\u0012\u00110!¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(3\u0012\u0014\u0012\u0012H¢\u0001¢\u0006\f\b<\u0012\b\b=\u0012\u0004\b\b(\\\u0012\u0004\u0012\u0002H\u0002\u0012\u0005\u0012\u0003H¢\u00010_H\b¢\u0006\u0003\u0010¥\u0001\u001a#\u0010¦\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\b\b\u0000\u0010\u0002*\u00020L*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00020\u0003\u001a\u001c\u0010§\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010U\u001a3\u0010§\u0001\u001a\u0002H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a\u001e\u0010¨\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003¢\u0006\u0002\u0010U\u001a5\u0010¨\u0001\u001a\u0004\u0018\u0001H\u0002\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005H\b¢\u0006\u0002\u0010R\u001a(\u0010©\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aI\u0010ª\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010C*\t\u0012\u0004\u0012\u0002HC0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010.\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001HC0\u0005H\b\u001aI\u0010«\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002\"\u000f\b\u0001\u0010C*\t\u0012\u0004\u0012\u0002HC0\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0016\b\u0004\u0010.\u001a\u0010\u0012\u0004\u0012\u0002H\u0002\u0012\u0006\u0012\u0004\u0018\u0001HC0\u0005H\b\u001a(\u0010¬\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a<\u0010­\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001\u001a\u0019\u0010®\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020\u001c0\u0003H\u0007¢\u0006\u0003\b¯\u0001\u001a\u0019\u0010®\u0001\u001a\u00020\u001b*\b\u0012\u0004\u0012\u00020\u001b0\u0003H\u0007¢\u0006\u0003\b°\u0001\u001a\u0019\u0010®\u0001\u001a\u00020\u001f*\b\u0012\u0004\u0012\u00020\u001f0\u0003H\u0007¢\u0006\u0003\b±\u0001\u001a\u0019\u0010®\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020!0\u0003H\u0007¢\u0006\u0003\b²\u0001\u001a\u0019\u0010®\u0001\u001a\u00020#*\b\u0012\u0004\u0012\u00020#0\u0003H\u0007¢\u0006\u0003\b³\u0001\u001a\u0019\u0010®\u0001\u001a\u00020!*\b\u0012\u0004\u0012\u00020%0\u0003H\u0007¢\u0006\u0003\b´\u0001\u001a.\u0010µ\u0001\u001a\u00020!\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020!0\u0005H\b\u001a.\u0010¶\u0001\u001a\u00020\u001b\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010.\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u001b0\u0005H\b\u001a%\u0010·\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u00100\u001a\u00020!\u001a1\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0012\u0010\u0004\u001a\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u00020\u00010\u0005\u001a6\u0010¹\u0001\u001a\u0002H?\"\u0004\b\u0000\u0010\u0002\"\u0010\b\u0001\u0010?*\n\u0012\u0006\b\u0000\u0012\u0002H\u00020@*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u0006\u0010\u0016\u001a\u0002H?¢\u0006\u0002\u0010H\u001a)\u0010º\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020»\u0001j\t\u0012\u0004\u0012\u0002H\u0002`¼\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010½\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020f\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001d\u0010¾\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00020h\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010¿\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020À\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a\u001e\u0010Á\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00020Â\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001a6\u0010Ã\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020Ä\u0001j\t\u0012\u0004\u0012\u0002H\u0002`Å\u0001\"\u000f\b\u0000\u0010\u0002*\t\u0012\u0004\u0012\u0002H\u00020\u0001*\b\u0012\u0004\u0012\u0002H\u00020\u0003H\u0007\u001aJ\u0010Ã\u0001\u001a\u0014\u0012\u0004\u0012\u0002H\u00020Ä\u0001j\t\u0012\u0004\u0012\u0002H\u0002`Å\u0001\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u00032\u001d\u0010\u0001\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00020\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0002`\u0001H\u0007\u001a$\u0010Æ\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u0002H\u00020Ç\u00010\u0003\"\u0004\b\u0000\u0010\u0002*\b\u0012\u0004\u0012\u0002H\u00020\u0003\u001aA\u0010È\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0002\u0012\u0004\u0012\u0002HC0\u000f0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010É\u0001\u001a\b\u0012\u0004\u0012\u0002HC0\u0003H\u0004\u001ar\u0010È\u0001\u001a\b\u0012\u0004\u0012\u0002H\r0\u0003\"\u0004\b\u0000\u0010\u0002\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010\r*\b\u0012\u0004\u0012\u0002H\u00020\u00032\r\u0010É\u0001\u001a\b\u0012\u0004\u0012\u0002HC0\u000328\u0010\u000e\u001a4\u0012\u0014\u0012\u0012H\u0002¢\u0006\r\b<\u0012\t\b=\u0012\u0005\b\b(Ê\u0001\u0012\u0014\u0012\u0012HC¢\u0006\r\b<\u0012\t\b=\u0012\u0005\b\b(Ë\u0001\u0012\u0004\u0012\u0002H\r0;¨\u0006Ì\u0001"}, d2 = {"all", "", "T", "Lkotlin/sequences/Sequence;", "predicate", "Lkotlin/Function1;", "any", "asIterable", "", "asSequence", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "associateByTo", "M", "", "destination", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "average", "", "", "averageOfByte", "averageOfDouble", "", "averageOfFloat", "", "averageOfInt", "", "averageOfLong", "", "averageOfShort", "contains", "Lkotlin/internal/OnlyInputTypes;", "element", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "count", "distinct", "distinctBy", "selector", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexedTo", "C", "", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "filterIsInstance", "R", "Lkotlin/internal/NoInfer;", "klass", "Ljava/lang/Class;", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;", "filterNot", "filterNotNull", "", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "find", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "findLast", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "firstOrNull", "flatMap", "flatMapTo", "fold", "initial", "operation", "acc", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldIndexed", "Lkotlin/Function3;", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "forEach", "", "action", "forEachIndexed", "groupBy", "", "groupByTo", "", "groupingBy", "Lkotlin/collections/Grouping;", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "joinTo", "A", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", "buffer", "separator", "", "prefix", "postfix", "limit", "truncated", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "joinToString", "", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "max", "", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxBy", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "min", "minBy", "minWith", "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "elements", "", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "minusElement", "none", "onEach", "partition", "plus", "plusElement", "reduce", "S", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "sortedWith", "sum", "sumOfByte", "sumOfDouble", "sumOfFloat", "sumOfInt", "sumOfLong", "sumOfShort", "sumBy", "sumByDouble", "take", "takeWhile", "toCollection", "toHashSet", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toList", "toMutableList", "toMutableSet", "", "toSet", "", "toSortedSet", "Ljava/util/SortedSet;", "Lkotlin/collections/SortedSet;", "withIndex", "Lkotlin/collections/IndexedValue;", "zip", "other", "a", "b", "kotlin-stdlib"}, k = 5, mv = {1, 1, 7}, xi = 1, xs = "kotlin/sequences/SequencesKt")
/* compiled from: _Sequences.kt */
class SequencesKt___SequencesKt extends SequencesKt__SequencesKt {
    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterIndexedTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull C r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, java.lang.Boolean> r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.filterIndexedTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2):C
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r5 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, r5);
        r5 = "destination";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, r5);
        r5 = "predicate";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, r5);
        r0 = r7;
        r2 = 0;
        r6 = r0.iterator();
        r5 = r6.hasNext();
        if (r5 == 0) goto L_0x0038;
    L_0x001b:
        r4 = r6.next();
        r3 = r2 + 1;
        r1 = r2;
        r5 = java.lang.Integer.valueOf(r1);
        r5 = r9.invoke(r5, r4);
        r5 = (java.lang.Boolean) r5;
        r5 = r5.booleanValue();
        if (r5 == 0) goto L_0x0035;
        r8.add(r4);
        r2 = r3;
        goto L_0x0015;
        return r8;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.filterIndexedTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2):C");
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> java.util.Map<K, java.util.List<T>> groupBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> r2) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.groupBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):java.util.Map<K, java.util.List<T>>
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r7 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, r7);
        r7 = "keySelector";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r10, r7);
        r2 = new java.util.LinkedHashMap;
        r2.<init>();
        r2 = (java.util.Map) r2;
        r7 = r9.iterator();
    L_0x0015:
        r8 = r7.hasNext();
        if (r8 == 0) goto L_0x003d;
    L_0x001b:
        r3 = r7.next();
        r4 = r10.invoke(r3);
        r0 = r2;
        r6 = r0.get(r4);
        if (r6 != 0) goto L_0x003b;
    L_0x002b:
        r1 = new java.util.ArrayList;
        r1.<init>();
        r0.put(r4, r1);
        r5 = r1;
        r5 = (java.util.List) r5;
        r5.add(r3);
        goto L_0x0015;
    L_0x003b:
        r5 = r6;
        goto L_0x0034;
    L_0x003d:
        return r2;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.groupBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):java.util.Map<K, java.util.List<T>>");
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V> java.util.Map<K, java.util.List<V>> groupBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.groupBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1):java.util.Map<K, java.util.List<V>>
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r7 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, r7);
        r7 = "keySelector";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r10, r7);
        r7 = "valueTransform";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r11, r7);
        r2 = new java.util.LinkedHashMap;
        r2.<init>();
        r2 = (java.util.Map) r2;
        r7 = r9.iterator();
    L_0x001b:
        r8 = r7.hasNext();
        if (r8 == 0) goto L_0x0047;
    L_0x0021:
        r3 = r7.next();
        r4 = r10.invoke(r3);
        r0 = r2;
        r6 = r0.get(r4);
        if (r6 != 0) goto L_0x0045;
    L_0x0031:
        r1 = new java.util.ArrayList;
        r1.<init>();
        r0.put(r4, r1);
        r5 = r1;
        r5 = (java.util.List) r5;
        r8 = r11.invoke(r3);
        r5.add(r8);
        goto L_0x001b;
    L_0x0045:
        r5 = r6;
        goto L_0x003a;
    L_0x0047:
        return r2;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.groupBy(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1):java.util.Map<K, java.util.List<V>>");
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, M extends java.util.Map<? super K, java.util.List<T>>> M groupByTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull M r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.groupByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1):M
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r6 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, r6);
        r6 = "destination";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, r6);
        r6 = "keySelector";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r10, r6);
        r6 = r8.iterator();
    L_0x0013:
        r7 = r6.hasNext();
        if (r7 == 0) goto L_0x003b;
    L_0x0019:
        r2 = r6.next();
        r3 = r10.invoke(r2);
        r0 = r9;
        r5 = r0.get(r3);
        if (r5 != 0) goto L_0x0039;
    L_0x0029:
        r1 = new java.util.ArrayList;
        r1.<init>();
        r0.put(r3, r1);
        r4 = r1;
        r4 = (java.util.List) r4;
        r4.add(r2);
        goto L_0x0013;
    L_0x0039:
        r4 = r5;
        goto L_0x0032;
    L_0x003b:
        return r9;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.groupByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1):M");
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, java.util.List<V>>> M groupByTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull M r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> r3, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> r4) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.groupByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1):M
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r6 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, r6);
        r6 = "destination";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, r6);
        r6 = "keySelector";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r10, r6);
        r6 = "valueTransform";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r11, r6);
        r6 = r8.iterator();
    L_0x0019:
        r7 = r6.hasNext();
        if (r7 == 0) goto L_0x0045;
    L_0x001f:
        r2 = r6.next();
        r3 = r10.invoke(r2);
        r0 = r9;
        r5 = r0.get(r3);
        if (r5 != 0) goto L_0x0043;
    L_0x002f:
        r1 = new java.util.ArrayList;
        r1.<init>();
        r0.put(r3, r1);
        r4 = r1;
        r4 = (java.util.List) r4;
        r7 = r11.invoke(r2);
        r4.add(r7);
        goto L_0x0019;
    L_0x0043:
        r4 = r5;
        goto L_0x0038;
    L_0x0045:
        return r9;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.groupByTo(kotlin.sequences.Sequence, java.util.Map, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1):M");
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapIndexedNotNullTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull C r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.mapIndexedNotNullTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2):C
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r6 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, r6);
        r6 = "destination";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r9, r6);
        r6 = "transform";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r10, r6);
        r0 = r8;
        r2 = 0;
        r6 = r0.iterator();
        r7 = r6.hasNext();
        if (r7 == 0) goto L_0x0032;
    L_0x001b:
        r5 = r6.next();
        r3 = r2 + 1;
        r1 = r2;
        r7 = java.lang.Integer.valueOf(r1);
        r4 = r10.invoke(r7, r5);
        if (r4 == 0) goto L_0x002f;
        r9.add(r4);
        r2 = r3;
        goto L_0x0015;
        return r9;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.mapIndexedNotNullTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function2):C");
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapNotNullTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> r1, @org.jetbrains.annotations.NotNull C r2, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: kotlin.sequences.SequencesKt___SequencesKt.mapNotNullTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1):C
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r4 = "$receiver";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r6, r4);
        r4 = "destination";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r7, r4);
        r4 = "transform";
        kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(r8, r4);
        r0 = r6;
        r4 = r0.iterator();
        r5 = r4.hasNext();
        if (r5 == 0) goto L_0x002a;
    L_0x001a:
        r2 = r4.next();
        r1 = r2;
        r3 = r8.invoke(r1);
        if (r3 == 0) goto L_0x0028;
        r7.add(r3);
        goto L_0x0014;
        return r7;
        */
        throw new UnsupportedOperationException("Method not decompiled: kotlin.sequences.SequencesKt___SequencesKt.mapNotNullTo(kotlin.sequences.Sequence, java.util.Collection, kotlin.jvm.functions.Function1):C");
    }

    public static final <T> boolean contains(@NotNull Sequence<? extends T> $receiver, T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return indexOf($receiver, element) >= 0;
    }

    public static final <T> T elementAt(@NotNull Sequence<? extends T> $receiver, int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return elementAtOrElse($receiver, index, new SequencesKt___SequencesKt$elementAt$1(index));
    }

    public static final <T> T elementAtOrElse(@NotNull Sequence<? extends T> $receiver, int index, @NotNull Function1<? super Integer, ? extends T> defaultValue) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(defaultValue, "defaultValue");
        if (index < 0) {
            return defaultValue.invoke(Integer.valueOf(index));
        }
        int count = 0;
        for (T element : $receiver) {
            int count2 = count + 1;
            if (index == count) {
                return element;
            }
            count = count2;
        }
        return defaultValue.invoke(Integer.valueOf(index));
    }

    @Nullable
    public static final <T> T elementAtOrNull(@NotNull Sequence<? extends T> $receiver, int index) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        if (index < 0) {
            return null;
        }
        int count = 0;
        for (T element : $receiver) {
            int count2 = count + 1;
            if (index == count) {
                return element;
            }
            count = count2;
        }
        return null;
    }

    @InlineOnly
    private static final <T> T find(@NotNull Sequence<? extends T> $receiver, Function1<? super T, Boolean> predicate) {
        for (T element$iv : $receiver) {
            if (((Boolean) predicate.invoke(element$iv)).booleanValue()) {
                return element$iv;
            }
        }
        return null;
    }

    @InlineOnly
    private static final <T> T findLast(@NotNull Sequence<? extends T> $receiver, Function1<? super T, Boolean> predicate) {
        Object last$iv = null;
        for (Object element$iv : $receiver) {
            if (((Boolean) predicate.invoke(element$iv)).booleanValue()) {
                last$iv = element$iv;
            }
        }
        return last$iv;
    }

    public static final <T> T first(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (iterator.hasNext()) {
            return iterator.next();
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> T first(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                return element;
            }
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (iterator.hasNext()) {
            return iterator.next();
        }
        return null;
    }

    @Nullable
    public static final <T> T firstOrNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (T element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                return element;
            }
        }
        return null;
    }

    public static final <T> int indexOf(@NotNull Sequence<? extends T> $receiver, T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        int index = 0;
        for (Object item : $receiver) {
            if (Intrinsics.areEqual((Object) element, item)) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int index = 0;
        for (Object item : $receiver) {
            if (((Boolean) predicate.invoke(item)).booleanValue()) {
                return index;
            }
            index++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int lastIndex = -1;
        int index = 0;
        for (Object item : $receiver) {
            if (((Boolean) predicate.invoke(item)).booleanValue()) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    public static final <T> T last(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (iterator.hasNext()) {
            Object last = iterator.next();
            while (iterator.hasNext()) {
                last = iterator.next();
            }
            return last;
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> T last(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T last = null;
        boolean found = false;
        for (T element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                last = element;
                found = true;
            }
        }
        if (found) {
            return last;
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    public static final <T> int lastIndexOf(@NotNull Sequence<? extends T> $receiver, T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        int lastIndex = -1;
        int index = 0;
        for (Object item : $receiver) {
            if (Intrinsics.areEqual((Object) element, item)) {
                lastIndex = index;
            }
            index++;
        }
        return lastIndex;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T last = iterator.next();
        while (iterator.hasNext()) {
            last = iterator.next();
        }
        return last;
    }

    @Nullable
    public static final <T> T lastOrNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        Object last = null;
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                last = element;
            }
        }
        return last;
    }

    public static final <T> T single(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (iterator.hasNext()) {
            Object single = iterator.next();
            if (!iterator.hasNext()) {
                return single;
            }
            throw new IllegalArgumentException("Sequence has more than one element.");
        }
        throw new NoSuchElementException("Sequence is empty.");
    }

    public static final <T> T single(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T single = null;
        boolean found = false;
        for (T element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                if (found) {
                    throw new IllegalArgumentException("Sequence contains more than one matching element.");
                }
                single = element;
                found = true;
            }
        }
        if (found) {
            return single;
        }
        throw new NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T single = iterator.next();
        if (iterator.hasNext()) {
            return null;
        }
        return single;
    }

    @Nullable
    public static final <T> T singleOrNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        T single = null;
        boolean found = false;
        for (T element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                if (found) {
                    return null;
                }
                single = element;
                found = true;
            }
        }
        if (found) {
            return single;
        }
        return null;
    }

    @NotNull
    public static final <T> Sequence<T> drop(@NotNull Sequence<? extends T> $receiver, int n) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        if ((n >= 0 ? 1 : null) == null) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        } else if (n == 0) {
            return $receiver;
        } else {
            if ($receiver instanceof DropTakeSequence) {
                return ((DropTakeSequence) $receiver).drop(n);
            }
            return new DropSequence($receiver, n);
        }
    }

    @NotNull
    public static final <T> Sequence<T> dropWhile(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new DropWhileSequence($receiver, predicate);
    }

    @NotNull
    public static final <T> Sequence<T> filter(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new FilteringSequence($receiver, true, predicate);
    }

    @NotNull
    public static final <T> Sequence<T> filterIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new TransformingSequence(new FilteringSequence(new IndexingSequence($receiver), true, new SequencesKt___SequencesKt$filterIndexed$1(predicate)), SequencesKt___SequencesKt$filterIndexed$2.INSTANCE);
    }

    private static final <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> $receiver) {
        Intrinsics.needClassReification();
        Sequence<R> filter = filter($receiver, SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE);
        if (filter != null) {
            return filter;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
    }

    private static final <R, C extends Collection<? super R>> C filterIsInstanceTo(@NotNull Sequence<?> $receiver, C destination) {
        for (Object element : $receiver) {
            Intrinsics.reifiedOperationMarker(3, "R");
            if (element instanceof Object) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T> Sequence<T> filterNot(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new FilteringSequence($receiver, false, predicate);
    }

    @NotNull
    public static final <T> Sequence<T> filterNotNull(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Sequence<T> filterNot = filterNot($receiver, SequencesKt___SequencesKt$filterNotNull$1.INSTANCE);
        if (filterNot != null) {
            return filterNot;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<T>");
    }

    @NotNull
    public static final <C extends Collection<? super T>, T> C filterNotNullTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        for (Object element : $receiver) {
            if (element != null) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterNotTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : $receiver) {
            if (!((Boolean) predicate.invoke(element)).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C filterTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                destination.add(element);
            }
        }
        return destination;
    }

    @NotNull
    public static final <T> Sequence<T> take(@NotNull Sequence<? extends T> $receiver, int n) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        if ((n >= 0 ? 1 : null) == null) {
            throw new IllegalArgumentException(("Requested element count " + n + " is less than zero.").toString());
        } else if (n == 0) {
            return SequencesKt__SequencesKt.emptySequence();
        } else {
            if ($receiver instanceof DropTakeSequence) {
                return ((DropTakeSequence) $receiver).take(n);
            }
            return new TakeSequence($receiver, n);
        }
    }

    @NotNull
    public static final <T> Sequence<T> takeWhile(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        return new TakeWhileSequence($receiver, predicate);
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sorted(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return new SequencesKt___SequencesKt$sorted$1($receiver);
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith($receiver, new ComparisonsKt__ComparisonsKt$compareBy$2(selector));
    }

    @NotNull
    public static final <T, R extends Comparable<? super R>> Sequence<T> sortedByDescending(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return sortedWith($receiver, new ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> Sequence<T> sortedDescending(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return sortedWith($receiver, ComparisonsKt__ComparisonsKt.reverseOrder());
    }

    @NotNull
    public static final <T> Sequence<T> sortedWith(@NotNull Sequence<? extends T> $receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        return new SequencesKt___SequencesKt$sortedWith$1($receiver, comparator);
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associate(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : $receiver) {
            Pair pair = (Pair) transform.invoke(element$iv);
            destination$iv.put(pair.getFirst(), pair.getSecond());
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K> Map<K, T> associateBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : $receiver) {
            destination$iv.put(keySelector.invoke(element$iv), element$iv);
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, V> Map<K, V> associateBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        Map destination$iv = new LinkedHashMap();
        for (Object element$iv : $receiver) {
            destination$iv.put(keySelector.invoke(element$iv), valueTransform.invoke(element$iv));
        }
        return destination$iv;
    }

    @NotNull
    public static final <T, K, M extends Map<? super K, ? super T>> M associateByTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        for (Object element : $receiver) {
            destination.put(keySelector.invoke(element), element);
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateByTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends K> keySelector, @NotNull Function1<? super T, ? extends V> valueTransform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        Intrinsics.checkParameterIsNotNull(valueTransform, "valueTransform");
        for (Object element : $receiver) {
            destination.put(keySelector.invoke(element), valueTransform.invoke(element));
        }
        return destination;
    }

    @NotNull
    public static final <T, K, V, M extends Map<? super K, ? super V>> M associateTo(@NotNull Sequence<? extends T> $receiver, @NotNull M destination, @NotNull Function1<? super T, ? extends Pair<? extends K, ? extends V>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element : $receiver) {
            Pair pair = (Pair) transform.invoke(element);
            destination.put(pair.getFirst(), pair.getSecond());
        }
        return destination;
    }

    @NotNull
    public static final <T, C extends Collection<? super T>> C toCollection(@NotNull Sequence<? extends T> $receiver, @NotNull C destination) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        for (Object item : $receiver) {
            destination.add(item);
        }
        return destination;
    }

    @NotNull
    public static final <T> HashSet<T> toHashSet(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return (HashSet) toCollection($receiver, new HashSet());
    }

    @NotNull
    public static final <T> List<T> toList(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList($receiver));
    }

    @NotNull
    public static final <T> List<T> toMutableList(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return (List) toCollection($receiver, new ArrayList());
    }

    @NotNull
    public static final <T> Set<T> toSet(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return SetsKt__SetsKt.optimizeReadOnlySet((Set) toCollection($receiver, new LinkedHashSet()));
    }

    @NotNull
    public static final <T extends Comparable<? super T>> SortedSet<T> toSortedSet(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return (SortedSet) toCollection($receiver, new TreeSet());
    }

    @NotNull
    public static final <T> SortedSet<T> toSortedSet(@NotNull Sequence<? extends T> $receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        return (SortedSet) toCollection($receiver, new TreeSet(comparator));
    }

    @NotNull
    public static final <T, R> Sequence<R> flatMap(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new FlatteningSequence($receiver, transform, SequencesKt___SequencesKt$flatMap$1.INSTANCE);
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C flatMapTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends Sequence<? extends R>> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object element : $receiver) {
            CollectionsKt__MutableCollectionsKt.addAll((Collection) destination, (Sequence) transform.invoke(element));
        }
        return destination;
    }

    @NotNull
    @SinceKotlin(version = "1.1")
    public static final <T, K> Grouping<T, K> groupingBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> keySelector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(keySelector, "keySelector");
        return new SequencesKt___SequencesKt$groupingBy$1($receiver, keySelector);
    }

    @NotNull
    public static final <T, R> Sequence<R> map(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new TransformingSequence($receiver, transform);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new TransformingIndexedSequence($receiver, transform);
    }

    @NotNull
    public static final <T, R> Sequence<R> mapIndexedNotNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return filterNotNull(new TransformingIndexedSequence($receiver, transform));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapIndexedTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function2<? super Integer, ? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        int index = 0;
        for (Object item : $receiver) {
            Integer valueOf = Integer.valueOf(index);
            index++;
            destination.add(transform.invoke(valueOf, item));
        }
        return destination;
    }

    @NotNull
    public static final <T, R> Sequence<R> mapNotNull(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return filterNotNull(new TransformingSequence($receiver, transform));
    }

    @NotNull
    public static final <T, R, C extends Collection<? super R>> C mapTo(@NotNull Sequence<? extends T> $receiver, @NotNull C destination, @NotNull Function1<? super T, ? extends R> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        for (Object item : $receiver) {
            destination.add(transform.invoke(item));
        }
        return destination;
    }

    @NotNull
    public static final <T> Sequence<IndexedValue<T>> withIndex(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return new IndexingSequence($receiver);
    }

    @NotNull
    public static final <T> Sequence<T> distinct(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return distinctBy($receiver, SequencesKt___SequencesKt$distinct$1.INSTANCE);
    }

    @NotNull
    public static final <T, K> Sequence<T> distinctBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends K> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        return new DistinctSequence($receiver, selector);
    }

    @NotNull
    public static final <T> Set<T> toMutableSet(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        LinkedHashSet set = new LinkedHashSet();
        for (Object item : $receiver) {
            set.add(item);
        }
        return set;
    }

    public static final <T> boolean all(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : $receiver) {
            if (!((Boolean) predicate.invoke(element)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return $receiver.iterator().hasNext();
    }

    public static final <T> boolean any(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        int count = 0;
        for (Object element : $receiver) {
            count++;
        }
        return count;
    }

    public static final <T> int count(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        int count = 0;
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                count++;
            }
        }
        return count;
    }

    public static final <T, R> R fold(@NotNull Sequence<? extends T> $receiver, R initial, @NotNull Function2<? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Object accumulator = initial;
        for (Object element : $receiver) {
            accumulator = operation.invoke(accumulator, element);
        }
        return accumulator;
    }

    public static final <T, R> R foldIndexed(@NotNull Sequence<? extends T> $receiver, R initial, @NotNull Function3<? super Integer, ? super R, ? super T, ? extends R> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        int index = 0;
        Object accumulator = initial;
        for (Object element : $receiver) {
            Integer valueOf = Integer.valueOf(index);
            index++;
            accumulator = operation.invoke(valueOf, accumulator, element);
        }
        return accumulator;
    }

    public static final <T> void forEach(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(action, NativeProtocol.WEB_DIALOG_ACTION);
        for (Object element : $receiver) {
            action.invoke(element);
        }
    }

    public static final <T> void forEachIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super Integer, ? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(action, NativeProtocol.WEB_DIALOG_ACTION);
        int index = 0;
        for (Object item : $receiver) {
            Integer valueOf = Integer.valueOf(index);
            index++;
            action.invoke(valueOf, item);
        }
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double m2245max(@NotNull Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double max = ((Number) iterator.next()).doubleValue();
        if (Double.isNaN(max)) {
            return Double.valueOf(max);
        }
        while (iterator.hasNext()) {
            double e = ((Number) iterator.next()).doubleValue();
            if (Double.isNaN(e)) {
                return Double.valueOf(e);
            }
            if (max < e) {
                max = e;
            }
        }
        return Double.valueOf(max);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float m2246max(@NotNull Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float max = ((Number) iterator.next()).floatValue();
        if (Float.isNaN(max)) {
            return Float.valueOf(max);
        }
        while (iterator.hasNext()) {
            float e = ((Number) iterator.next()).floatValue();
            if (Float.isNaN(e)) {
                return Float.valueOf(e);
            }
            if (max < e) {
                max = e;
            }
        }
        return Float.valueOf(max);
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T max(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T max = (Comparable) iterator.next();
        while (iterator.hasNext()) {
            T e = (Comparable) iterator.next();
            if (max.compareTo(e) < 0) {
                max = e;
            }
        }
        return max;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T maxBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T maxElem = iterator.next();
        Comparable maxValue = (Comparable) selector.invoke(maxElem);
        while (iterator.hasNext()) {
            T e = iterator.next();
            Comparable v = (Comparable) selector.invoke(e);
            if (maxValue.compareTo(v) < 0) {
                maxElem = e;
                maxValue = v;
            }
        }
        return maxElem;
    }

    @Nullable
    public static final <T> T maxWith(@NotNull Sequence<? extends T> $receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T max = iterator.next();
        while (iterator.hasNext()) {
            T e = iterator.next();
            if (comparator.compare(max, e) < 0) {
                max = e;
            }
        }
        return max;
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Double m2247min(@NotNull Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        double min = ((Number) iterator.next()).doubleValue();
        if (Double.isNaN(min)) {
            return Double.valueOf(min);
        }
        while (iterator.hasNext()) {
            double e = ((Number) iterator.next()).doubleValue();
            if (Double.isNaN(e)) {
                return Double.valueOf(e);
            }
            if (min > e) {
                min = e;
            }
        }
        return Double.valueOf(min);
    }

    @SinceKotlin(version = "1.1")
    @Nullable
    public static final Float m2248min(@NotNull Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        float min = ((Number) iterator.next()).floatValue();
        if (Float.isNaN(min)) {
            return Float.valueOf(min);
        }
        while (iterator.hasNext()) {
            float e = ((Number) iterator.next()).floatValue();
            if (Float.isNaN(e)) {
                return Float.valueOf(e);
            }
            if (min > e) {
                min = e;
            }
        }
        return Float.valueOf(min);
    }

    @Nullable
    public static final <T extends Comparable<? super T>> T min(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T min = (Comparable) iterator.next();
        while (iterator.hasNext()) {
            T e = (Comparable) iterator.next();
            if (min.compareTo(e) > 0) {
                min = e;
            }
        }
        return min;
    }

    @Nullable
    public static final <T, R extends Comparable<? super R>> T minBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, ? extends R> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T minElem = iterator.next();
        Comparable minValue = (Comparable) selector.invoke(minElem);
        while (iterator.hasNext()) {
            T e = iterator.next();
            Comparable v = (Comparable) selector.invoke(e);
            if (minValue.compareTo(v) > 0) {
                minElem = e;
                minValue = v;
            }
        }
        return minElem;
    }

    @Nullable
    public static final <T> T minWith(@NotNull Sequence<? extends T> $receiver, @NotNull Comparator<? super T> comparator) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(comparator, "comparator");
        Iterator iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
            return null;
        }
        T min = iterator.next();
        while (iterator.hasNext()) {
            T e = iterator.next();
            if (comparator.compare(min, e) > 0) {
                min = e;
            }
        }
        return min;
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return !$receiver.iterator().hasNext();
    }

    public static final <T> boolean none(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @NotNull
    @SinceKotlin(version = "1.1")
    public static final <T> Sequence<T> onEach(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Unit> action) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(action, NativeProtocol.WEB_DIALOG_ACTION);
        return map($receiver, new SequencesKt___SequencesKt$onEach$1(action));
    }

    public static final <S, T extends S> S reduce(@NotNull Sequence<? extends T> $receiver, @NotNull Function2<? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator iterator = $receiver.iterator();
        if (iterator.hasNext()) {
            Object accumulator = iterator.next();
            while (iterator.hasNext()) {
                accumulator = operation.invoke(accumulator, iterator.next());
            }
            return accumulator;
        }
        throw new UnsupportedOperationException("Empty sequence can't be reduced.");
    }

    public static final <S, T extends S> S reduceIndexed(@NotNull Sequence<? extends T> $receiver, @NotNull Function3<? super Integer, ? super S, ? super T, ? extends S> operation) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(operation, "operation");
        Iterator iterator = $receiver.iterator();
        if (iterator.hasNext()) {
            int index = 1;
            Object accumulator = iterator.next();
            while (iterator.hasNext()) {
                Integer valueOf = Integer.valueOf(index);
                index++;
                accumulator = operation.invoke(valueOf, accumulator, iterator.next());
            }
            return accumulator;
        }
        throw new UnsupportedOperationException("Empty sequence can't be reduced.");
    }

    public static final <T> int sumBy(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Integer> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        int sum = 0;
        for (Object element : $receiver) {
            sum += ((Number) selector.invoke(element)).intValue();
        }
        return sum;
    }

    public static final <T> double sumByDouble(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Double> selector) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(selector, "selector");
        double sum = 0.0d;
        for (Object element : $receiver) {
            sum += ((Number) selector.invoke(element)).doubleValue();
        }
        return sum;
    }

    @NotNull
    public static final <T> Sequence<T> requireNoNulls(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return map($receiver, new SequencesKt___SequencesKt$requireNoNulls$1($receiver));
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return new SequencesKt___SequencesKt$minus$1($receiver, element);
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return (elements.length == 0 ? 1 : null) != null ? $receiver : new SequencesKt___SequencesKt$minus$2($receiver, elements);
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return new SequencesKt___SequencesKt$minus$3($receiver, elements);
    }

    @NotNull
    public static final <T> Sequence<T> minus(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return new SequencesKt___SequencesKt$minus$4($receiver, elements);
    }

    @InlineOnly
    private static final <T> Sequence<T> minusElement(@NotNull Sequence<? extends T> $receiver, T element) {
        return minus((Sequence) $receiver, (Object) element);
    }

    @NotNull
    public static final <T> Pair<List<T>, List<T>> partition(@NotNull Sequence<? extends T> $receiver, @NotNull Function1<? super T, Boolean> predicate) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(predicate, "predicate");
        ArrayList first = new ArrayList();
        ArrayList second = new ArrayList();
        for (Object element : $receiver) {
            if (((Boolean) predicate.invoke(element)).booleanValue()) {
                first.add(element);
            } else {
                second.add(element);
            }
        }
        return new Pair(first, second);
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, T element) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Sequence[] sequenceArr = new Sequence[2];
        sequenceArr[0] = $receiver;
        sequenceArr[1] = SequencesKt__SequencesKt.sequenceOf(element);
        return SequencesKt__SequencesKt.flatten(SequencesKt__SequencesKt.sequenceOf(sequenceArr));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, @NotNull T[] elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return plus((Sequence) $receiver, (Iterable) ArraysKt___ArraysKt.asList((Object[]) elements));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, @NotNull Iterable<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return SequencesKt__SequencesKt.flatten(SequencesKt__SequencesKt.sequenceOf($receiver, CollectionsKt___CollectionsKt.asSequence(elements)));
    }

    @NotNull
    public static final <T> Sequence<T> plus(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends T> elements) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(elements, "elements");
        return SequencesKt__SequencesKt.flatten(SequencesKt__SequencesKt.sequenceOf($receiver, elements));
    }

    @InlineOnly
    private static final <T> Sequence<T> plusElement(@NotNull Sequence<? extends T> $receiver, T element) {
        return plus((Sequence) $receiver, (Object) element);
    }

    @NotNull
    public static final <T, R> Sequence<Pair<T, R>> zip(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends R> other) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, FacebookRequestErrorClassification.KEY_OTHER);
        return new MergingSequence($receiver, other, SequencesKt___SequencesKt$zip$1.INSTANCE);
    }

    @NotNull
    public static final <T, R, V> Sequence<V> zip(@NotNull Sequence<? extends T> $receiver, @NotNull Sequence<? extends R> other, @NotNull Function2<? super T, ? super R, ? extends V> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(other, FacebookRequestErrorClassification.KEY_OTHER);
        Intrinsics.checkParameterIsNotNull(transform, "transform");
        return new MergingSequence($receiver, other, transform);
    }

    @NotNull
    public static /* bridge */ /* synthetic */ Appendable joinTo$default(Sequence sequence, Appendable appendable, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        return joinTo(sequence, appendable, (i2 & 2) != 0 ? ", " : charSequence, (i2 & 4) != 0 ? "" : charSequence2, (i2 & 8) != 0 ? "" : charSequence3, (i2 & 16) != 0 ? -1 : i, (i2 & 32) != 0 ? "..." : charSequence4, (i2 & 64) != 0 ? (Function1) null : function1);
    }

    @NotNull
    public static final <T, A extends Appendable> A joinTo(@NotNull Sequence<? extends T> $receiver, @NotNull A buffer, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(buffer, "buffer");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        buffer.append(prefix);
        int count = 0;
        for (Object element : $receiver) {
            count++;
            if (count > 1) {
                buffer.append(separator);
            }
            if (limit >= 0 && count > limit) {
                break;
            }
            StringsKt__StringBuilderKt.appendElement(buffer, element, transform);
        }
        if (limit >= 0 && count > limit) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    @NotNull
    public static /* bridge */ /* synthetic */ String joinToString$default(Sequence sequence, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, int i, CharSequence charSequence4, Function1 function1, int i2, Object obj) {
        return joinToString(sequence, (i2 & 1) != 0 ? ", " : charSequence, (i2 & 2) != 0 ? "" : charSequence2, (i2 & 4) != 0 ? "" : charSequence3, (i2 & 8) != 0 ? -1 : i, (i2 & 16) != 0 ? "..." : charSequence4, (i2 & 32) != 0 ? (Function1) null : function1);
    }

    @NotNull
    public static final <T> String joinToString(@NotNull Sequence<? extends T> $receiver, @NotNull CharSequence separator, @NotNull CharSequence prefix, @NotNull CharSequence postfix, int limit, @NotNull CharSequence truncated, @Nullable Function1<? super T, ? extends CharSequence> transform) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(separator, "separator");
        Intrinsics.checkParameterIsNotNull(prefix, "prefix");
        Intrinsics.checkParameterIsNotNull(postfix, "postfix");
        Intrinsics.checkParameterIsNotNull(truncated, "truncated");
        String stringBuilder = ((StringBuilder) joinTo($receiver, new StringBuilder(), separator, prefix, postfix, limit, truncated, transform)).toString();
        Intrinsics.checkExpressionValueIsNotNull(stringBuilder, "joinTo(StringBuilder(), …ed, transform).toString()");
        return stringBuilder;
    }

    @NotNull
    public static final <T> Iterable<T> asIterable(@NotNull Sequence<? extends T> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        return new SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1($receiver);
    }

    @InlineOnly
    private static final <T> Sequence<T> asSequence(@NotNull Sequence<? extends T> $receiver) {
        return $receiver;
    }

    @JvmName(name = "averageOfByte")
    public static final double averageOfByte(@NotNull Sequence<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        for (Number byteValue : $receiver) {
            sum += (double) byteValue.byteValue();
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / ((double) count);
    }

    @JvmName(name = "averageOfShort")
    public static final double averageOfShort(@NotNull Sequence<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        for (Number shortValue : $receiver) {
            sum += (double) shortValue.shortValue();
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / ((double) count);
    }

    @JvmName(name = "averageOfInt")
    public static final double averageOfInt(@NotNull Sequence<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        for (Number intValue : $receiver) {
            sum += (double) intValue.intValue();
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / ((double) count);
    }

    @JvmName(name = "averageOfLong")
    public static final double averageOfLong(@NotNull Sequence<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        for (Number longValue : $receiver) {
            sum += (double) longValue.longValue();
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / ((double) count);
    }

    @JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@NotNull Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        for (Number floatValue : $receiver) {
            sum += (double) floatValue.floatValue();
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / ((double) count);
    }

    @JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@NotNull Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        int count = 0;
        for (Number doubleValue : $receiver) {
            sum += doubleValue.doubleValue();
            count++;
        }
        return count == 0 ? DoubleCompanionObject.INSTANCE.getNaN() : sum / ((double) count);
    }

    @JvmName(name = "sumOfByte")
    public static final int sumOfByte(@NotNull Sequence<Byte> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        int sum = 0;
        for (Number byteValue : $receiver) {
            sum += byteValue.byteValue();
        }
        return sum;
    }

    @JvmName(name = "sumOfShort")
    public static final int sumOfShort(@NotNull Sequence<Short> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        int sum = 0;
        for (Number shortValue : $receiver) {
            sum += shortValue.shortValue();
        }
        return sum;
    }

    @JvmName(name = "sumOfInt")
    public static final int sumOfInt(@NotNull Sequence<Integer> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        int sum = 0;
        for (Number intValue : $receiver) {
            sum += intValue.intValue();
        }
        return sum;
    }

    @JvmName(name = "sumOfLong")
    public static final long sumOfLong(@NotNull Sequence<Long> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        long sum = 0;
        for (Number longValue : $receiver) {
            sum += longValue.longValue();
        }
        return sum;
    }

    @JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@NotNull Sequence<Float> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        float sum = 0.0f;
        for (Number floatValue : $receiver) {
            sum += floatValue.floatValue();
        }
        return sum;
    }

    @JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@NotNull Sequence<Double> $receiver) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        double sum = 0.0d;
        for (Number doubleValue : $receiver) {
            sum += doubleValue.doubleValue();
        }
        return sum;
    }

    @NotNull
    public static final <R> Sequence<R> filterIsInstance(@NotNull Sequence<?> $receiver, @NotNull Class<R> klass) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(klass, "klass");
        Sequence<R> filter = filter($receiver, new SequencesKt___SequencesKt$filterIsInstance$2(klass));
        if (filter != null) {
            return filter;
        }
        throw new TypeCastException("null cannot be cast to non-null type kotlin.sequences.Sequence<R>");
    }

    @NotNull
    public static final <C extends Collection<? super R>, R> C filterIsInstanceTo(@NotNull Sequence<?> $receiver, @NotNull C destination, @NotNull Class<R> klass) {
        Intrinsics.checkParameterIsNotNull($receiver, "$receiver");
        Intrinsics.checkParameterIsNotNull(destination, Param.DESTINATION);
        Intrinsics.checkParameterIsNotNull(klass, "klass");
        for (Object element : $receiver) {
            if (klass.isInstance(element)) {
                destination.add(element);
            }
        }
        return destination;
    }
}
